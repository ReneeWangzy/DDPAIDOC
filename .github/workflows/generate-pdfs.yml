name: Generate PDF Manuals
on:
  workflow_dispatch:
    inputs:
      manual_path:
        description: 'PDF生成路径'
        required: true
        type: string

jobs:
  generate-pdf:
    runs-on: ubuntu-22.04
    env:
      FONT_CACHE_KEY: ${{ runner.os }}-noto-fonts-v1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Chinese fonts
        uses: actions/cache@v3
        id: font-cache
        with:
          path: /usr/share/fonts/truetype/noto
          key: ${{ env.FONT_CACHE_KEY }}

      - name: Install Chinese fonts (仅缓存未命中时执行)
        if: steps.font-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends fonts-noto-cjk
          sudo fc-cache -fv
          echo "=== 已安装字体 ==="
          fc-list :lang=zh | grep "Noto Sans CJK SC" || exit 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install weasyprint==58.1 pygments

      # =============== 调试和验证部分 ===============
      - name: Debug repository structure
        run: |
          echo "当前工作目录: $(pwd)"
          echo "------------------------------------"
          ls -la
          
          echo "------------------------------------"
          echo "脚本目录内容:"
          ls -la .github/scripts/ || echo ".github/scripts/ 不存在"
          
          echo "------------------------------------"
          echo "样式目录内容:"
          ls -la styles/ || echo "styles/ 不存在"
          
          echo "------------------------------------"
          echo "目标手册目录内容:"
          if [ -d "${{ github.event.inputs.manual_path }}" ]; then
            ls -la "${{ github.event.inputs.manual_path }}"
          else
            echo "::error::目录 ${{ github.event.inputs.manual_path }} 不存在"
            exit 1
          fi
          echo "------------------------------------"

      - name: Create output directory
        run: mkdir -p pdf-output

      - name: Verify Python script existence
        run: |
          if [ -f ".github/scripts/generate_pdf.py" ]; then
            echo "Python脚本存在，前20行内容："
            echo "------------------------------------"
            head -n 20 .github/scripts/generate_pdf.py
            echo "------------------------------------"
          else
            echo "::error::未找到Python脚本 .github/scripts/generate_pdf.py"
            exit 1
          fi

      - name: Verify CSS file
        run: |
          if [ -f ".github/styles/default.css" ]; then
            echo "CSS文件存在，前10行内容："
            echo "------------------------------------"
            head -n 10 .github/styles/default.css
            echo "------------------------------------"
            
            # 检查是否包含中文字体定义
            if ! grep -q "Noto Sans CJK SC" .github/styles/default.css; then
              echo "::warning::CSS文件中未检测到中文字体定义"
              echo "建议添加："
              echo "body { font-family: 'Noto Sans CJK SC', sans-serif; }"
            fi
          else
            echo "::error::未找到CSS文件 .github/styles/default.css"
            exit 1
          fi
      # =============== 调试结束 ===============

      - name: Generate test PDF
        run: |
          echo '<!DOCTYPE html>
          <html>
          <head><meta charset="utf-8">
          <style>
            @font-face {
              font-family: "Noto Sans CJK SC";
              src: local("Noto Sans CJK SC");
            }
            body { font-family: "Noto Sans CJK SC", sans-serif; }
          </style>
          </head>
          <body><p>中文测试：产品外观 显示屏(非触控)</p></body>
          </html>' > test.html
          
          python -m weasyprint test.html pdf-output/font-test.pdf
          echo "=== 测试PDF生成结果 ==="
          ls -lh pdf-output/

      - name: Generate production PDF
        run: |
          python .github/scripts/generate_pdf.py \
            --dir "${{ github.event.inputs.manual_path }}" \
            --output pdf-output \
            --css .github/styles/default.css \
            --verbose || {
              echo "::error::PDF生成失败"
              exit 1
            }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: generated-pdf-${{ github.run_number }}
          path: pdf-output/*.pdf
          retention-days: 3
